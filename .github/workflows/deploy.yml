name: Deploy to GitHub Pages

on:
  # Trigger the workflow on push to main branch
  push:
    branches: [main]
  
  # Allow manual trigger from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Verify Next.js configuration
        run: |
          echo "Checking Next.js configuration files:"
          ls -la next.config.*
          echo "Content of next.config.ts:"
          cat next.config.ts
          echo "Verifying Node.js and npm versions:"
          node --version
          npm --version
          echo "Checking package.json scripts:"
          cat package.json | grep -A 5 '"scripts"'
        
      - name: Build with Next.js
        run: |
          npm run build
          echo "Build completed. Checking results:"
          ls -la
          echo "Checking for Next.js build artifacts:"
          ls -la .next/ || echo "No .next directory"
          echo "Checking for output directory:"
          ls -la out/ || echo "No out directory found"
        
      - name: Verify build output
        run: |
          echo "Checking if out directory exists..."
          if [ -d "out" ]; then
            echo "✓ out directory exists"
            echo "Contents:"
            ls -la out/
            echo "Total files in out:"
            find out -type f | wc -l
          else
            echo "✗ out directory does not exist"
            echo "Available directories:"
            ls -la
            exit 1
          fi
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
